<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uniquecrownclown</title>
  
  <subtitle>clown的笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uniquecrownclown.github.io/"/>
  <updated>2019-03-27T03:02:02.153Z</updated>
  <id>https://uniquecrownclown.github.io/</id>
  
  <author>
    <name>clown</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm</title>
    <link href="https://uniquecrownclown.github.io/2019/03/27/knowledge/npm/"/>
    <id>https://uniquecrownclown.github.io/2019/03/27/knowledge/npm/</id>
    <published>2019-03-27T02:25:03.412Z</published>
    <updated>2019-03-27T03:02:02.153Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://registry.npm.taobao.org/" target="_blank" rel="external">https://registry.npm.taobao.org/</a></p><p>登录<br>    npm adduser<br>替换淘宝的镜像<br>    npm config set registry <a href="https://registry.npmjs.org/" target="_blank" rel="external">https://registry.npmjs.org/</a></p><p>cnpm唯一不支持的命令： publish</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://registry.npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://registry.npm.taobao.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;登录&lt;br&gt;    npm addus
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="npm" scheme="https://uniquecrownclown.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>redux学习笔记</title>
    <link href="https://uniquecrownclown.github.io/2019/01/04/knowledge/redux/"/>
    <id>https://uniquecrownclown.github.io/2019/01/04/knowledge/redux/</id>
    <published>2019-01-04T02:07:44.771Z</published>
    <updated>2019-03-27T03:09:29.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><pre><code>1. Redux依靠一个统一且不可变的数据存储来同步数据，并且更新那里的数据时会触发应用的更新渲染。 2. state的更新是以一种不可变的方式进行，它会发布一条明确的action消息，这个消息必须被reducer函数处理。 由于使用了这样明确的方式，很容易弄清楚一个action是如何影响程序的statestate(js对象)action(js对象) 具体接收dispach传递的参数后怎么处理    action 本质上是 JavaScript 普通对象。    我们约定，action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。    多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。reducer 只是一个接收 state 和 action，并返回新的 state 的函数，和view的dispatch隔离combineReducers()合并值，reducer其实就是state的状态定义dispatch(action)来改变state的值3. redux-thunk(中间件异步action初级方案)和 redux-saga(中间件异步action进阶方案)4. dva-cli        阿里基于redux和react和webpack 是一个基于 Redux 的 轻量级数据流方案#### connect和provider组件1. connect的参数mapStateToProps    入参state，return一个传递给展示组件props使用的对象，还可以使用第二个参数，代表容器组件的props对象    mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染mapDisapachToProps    入参dispatch，return一个传递给展示组件props使用的对象方法    可以通过import { bindActionCreators } from &quot;redux&quot;;来把容器组件dispatch要触发的action传递给展示容器2. React-Redux 提供Provider组件，可以让容器组件拿到state</code></pre><h3 id="redux-thunk，dva"><a href="#redux-thunk，dva" class="headerlink" title="redux-thunk，dva"></a>redux-thunk，dva</h3><h3 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redux&quot;&gt;&lt;a href=&quot;#redux&quot; class=&quot;headerlink&quot; title=&quot;redux&quot;&gt;&lt;/a&gt;redux&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. Redux依靠一个统一且不可变的数据存储来同步数据，并且更新那里的数据时会触发应用的更新渲染。
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redux简单笔记" scheme="https://uniquecrownclown.github.io/tags/redux%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染</title>
    <link href="https://uniquecrownclown.github.io/2018/11/27/knowledge/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>https://uniquecrownclown.github.io/2018/11/27/knowledge/浏览器渲染加载过程/</id>
    <published>2018-11-27T08:32:40.314Z</published>
    <updated>2019-01-04T02:27:26.543Z</updated>
    
    <content type="html"><![CDATA[<p>假如现在页面里放在head的css文件下载速度很慢，页面会出现什么情况？<br>大概页面会等待这个CSS的下载，这个时候页面是白屏状态，然后这个CSS资源会有一个超时时间，<br>假如超过了这个超时时间，这个资源相当于会下载失败，浏览器会直接跳过这个CSS资源，<br>根据已有的CSS资源生成CSS规则树，进而生成Render树，然后渲染页面。</p><p>浏览器可以对拿到手的资源进行缓存，避免对一个资源的重复请求获取，节约时间提升性能</p><p>浏览器缓存可以分为两类：强缓存和协商缓存</p><ol><li>强缓存：上一次的HTTP交互中，服务器通知了浏览器一个缓存时间，在该时间内对该资源的请求都可以直接使用缓存。</li><li>协商缓存：向服务器发送请求，服务器会根据这个请求的request header的参数来判断是否命中，如果命中则返回304状态码告诉浏览器可以直接使用缓存，否则就重新处理请求并返回资源。<br>判断命中与否主要是通过对request header中的If-Modified-Since和Etag字段与服务器上资源的信息进行比对分析得出的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假如现在页面里放在head的css文件下载速度很慢，页面会出现什么情况？&lt;br&gt;大概页面会等待这个CSS的下载，这个时候页面是白屏状态，然后这个CSS资源会有一个超时时间，&lt;br&gt;假如超过了这个超时时间，这个资源相当于会下载失败，浏览器会直接跳过这个CSS资源，&lt;br&gt;根据
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="浏览器渲染" scheme="https://uniquecrownclown.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>react学习笔记</title>
    <link href="https://uniquecrownclown.github.io/2018/11/26/knowledge/react/"/>
    <id>https://uniquecrownclown.github.io/2018/11/26/knowledge/react/</id>
    <published>2018-11-26T06:59:05.219Z</published>
    <updated>2019-03-27T03:31:24.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ol><li>Create React App脚手架<br>Create React App搭建单页react工程    </li><li>容器组件和展示组件的区别<br>container文件夹和compoment文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法1</div><div class="line">npx create-react-app my-app  --scripts-version=react-scripts-ts</div><div class="line">npx create-react-app my-project --scripts-version=react-scripts-ts-antd(antd的ui框架)</div><div class="line">cd my-app</div><div class="line">npm start</div><div class="line">方法2</div><div class="line">npm init react-app my-app</div><div class="line">yarn create react-app my-app</div><div class="line">cd my-app</div><div class="line">yarn start</div><div class="line">npm run eject 暴露webpack的config,不可逆</div></pre></td></tr></table></figure></li></ol><h4 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h4><ol><li><p>JSX 代码的外面扩上一个小括号，这样可以防止 分号自动插入 的 bug<br>会带上换行和缩进，这样可以增强代码的可读性<br>JSX 当中的表达式要包含在大括号里<br>React DOM 使用 camelCase 小驼峰命名 来定义属性的名称，而不是使用 HTML 的属性名称<br> class 变成了 className，而 tabindex 则对应着 tabIndex<br>条件渲染和列表渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function NumberList(props) &#123;</div><div class="line">  const numbers = props.numbers;</div><div class="line">  return (</div><div class="line">&lt;ul&gt;</div><div class="line">  &#123;numbers.map((number) =&gt;</div><div class="line">&lt;ListItem key=&#123;number.toString()&#125;</div><div class="line">  value=&#123;number&#125; /&gt;</div><div class="line"></div><div class="line">  )&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>表单怎么用onchange事件和state实现数据value的控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">//受控组件</div><div class="line">class NameForm extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">super(props);</div><div class="line">this.state = &#123;value: &apos;&apos;&#125;;</div><div class="line"></div><div class="line">this.handleChange = this.handleChange.bind(this);</div><div class="line">this.handleSubmit = this.handleSubmit.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(event) &#123;</div><div class="line">this.setState(&#123;value: event.target.value&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">alert(&apos;A name was submitted: &apos; + this.state.value);</div><div class="line">event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">return (</div><div class="line">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">&lt;label&gt;</div><div class="line">  Name:</div><div class="line">  &lt;input type=&quot;text&quot;  defaultValue=&quot;哈哈哈&quot; value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 非受控组件</div><div class="line">class NameForm extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">super(props);</div><div class="line">this.handleSubmit = this.handleSubmit.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">alert(&apos;A name was submitted: &apos; + this.input.value);</div><div class="line">event.preventDefault();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">return (</div><div class="line">  &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">&lt;label&gt;</div><div class="line">  Name:</div><div class="line">  &lt;input type=&quot;text&quot; defaultValue=&quot;哈哈哈&quot; ref=&#123;(input) =&gt; this.input = input&#125; /&gt;</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="state-amp-生命周期"><a href="#state-amp-生命周期" class="headerlink" title="state&amp;生命周期"></a>state&amp;生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">class Clock extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">super(props);</div><div class="line">this.state = &#123;date: new Date()&#125;;</div><div class="line"></div><div class="line">// This binding is necessary to make `this` work in the callback</div><div class="line">this.handleClick = this.handleClick.bind(this);</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">// dom首次挂载执行</div><div class="line">this.timerID = setInterval(</div><div class="line">  () =&gt; this.tick(),</div><div class="line">  1000</div><div class="line">);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">// 组件dom移除时执行</div><div class="line">clearInterval(this.timerID);</div><div class="line">  &#125;</div><div class="line">  tick() &#123;</div><div class="line">this.setState(&#123;</div><div class="line">  date: new Date()</div><div class="line">&#125;);</div><div class="line">// 可以获取state的前一个值</div><div class="line">this.setState((prevState, props) =&gt; (&#123;</div><div class="line">  counter: prevState.counter + props.increment</div><div class="line">&#125;));</div><div class="line">  &#125;</div><div class="line">  handleClick()&#123;</div><div class="line">//使用实验性的属性初始化器语法，可以用箭头函数省掉构造器那里的绑定</div><div class="line">alert(&apos;button Click&apos;)</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">return (</div><div class="line">  &lt;div className=&quot;ClockComponent&quot;&gt;</div><div class="line">&lt;h1&gt;Hello, world!&lt;/h1&gt;</div><div class="line">&lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</div><div class="line">&lt;button onClick=&#123;handleClick&#125;&gt;</div><div class="line">Activate Lasers</div><div class="line">&lt;/button&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="HOC高级组件"><a href="#HOC高级组件" class="headerlink" title="HOC高级组件"></a>HOC高级组件</h3><p>占个坑</p><h3 id="react-router应用"><a href="#react-router应用" class="headerlink" title="react-router应用"></a>react-router应用</h3><pre><code>React-router提供了一些router的核心api，包括Router, Route, Switch等，但是它没有提供dom操作进行跳转的apiReact-router-dom提供了BrowserRouter, Route, Link等api,我们可以通过dom的事件控制路由。例如点击一个按钮进行跳转，大多数情况下我们是这种情况，所以在开发过程中，我们更多是使用React-router-dom</code></pre><h3 id="涉及到的npm包"><a href="#涉及到的npm包" class="headerlink" title="涉及到的npm包"></a>涉及到的npm包</h3><pre><code>classnamesprop-typesstyle-components(css in js)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react&quot;&gt;&lt;a href=&quot;#react&quot; class=&quot;headerlink&quot; title=&quot;react&quot;&gt;&lt;/a&gt;react&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Create React App脚手架&lt;br&gt;Create React App搭建单页react工程  
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="react简单笔记" scheme="https://uniquecrownclown.github.io/tags/react%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js同步异步</title>
    <link href="https://uniquecrownclown.github.io/2018/11/26/knowledge/js%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/"/>
    <id>https://uniquecrownclown.github.io/2018/11/26/knowledge/js同步异步/</id>
    <published>2018-11-26T01:34:57.715Z</published>
    <updated>2019-03-27T03:04:48.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ol><li><p>基础用用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new promise((resolve,reject)=&gt;&#123;</div><div class="line">if(ss)&#123;</div><div class="line">resolve(&apos;apple&apos;)</div><div class="line">&#125;else&#123;</div><div class="line">reject(&apos;peach&apos;)</div><div class="line">&#125;</div><div class="line">&#125;).then(result=&gt;&#123;</div><div class="line">console.log(result) // apple</div><div class="line">&#125;).catch(reason=&gt;&#123;</div><div class="line">console.log(reason) //peach</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>promise all()的用法</p></li></ol><h3 id="await和async"><a href="#await和async" class="headerlink" title="await和async"></a>await和async</h3><p>在forEach中存在异步操作时用await和async时有问题，改用for(item of items)实现</p><h3 id="generator-amp-yield"><a href="#generator-amp-yield" class="headerlink" title="generator&amp;yield"></a>generator&amp;yield</h3><p>function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。<br>es6关于yield和next的用法</p><ol><li><p>接收参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function* idMaker()&#123;</div><div class="line">   var index = arguments[0] || 0;</div><div class="line">   while(true)</div><div class="line">       yield index++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var gen = idMaker(5);</div><div class="line">console.log(gen.next().value); // 5</div><div class="line">console.log(gen.next().value); // 6</div></pre></td></tr></table></figure></li><li><p>yield* 示例</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function* anotherGenerator(i) &#123;</div><div class="line">  yield i + 1;</div><div class="line">  yield i + 2;</div><div class="line">  yield i + 3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* generator(i)&#123;</div><div class="line">  yield i;</div><div class="line">  yield* anotherGenerator(i);// 移交执行权</div><div class="line">  yield i + 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var gen = generator(10);</div><div class="line"></div><div class="line">console.log(gen.next().value); // 10</div><div class="line">console.log(gen.next().value); // 11</div><div class="line">console.log(gen.next().value); // 12</div><div class="line">console.log(gen.next().value); // 13</div><div class="line">console.log(gen.next().value); // 20</div></pre></td></tr></table></figure></li></ol><ol><li>generator函数中有return<br>当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。<br>如果 return 后面跟了一个值，那么这个值会作为当前调用 next() 方法返回的 value 值。再调用next()就不执行了</li></ol><ol><li><p>使用迭代器遍历二维数组并赋给一维数组</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function* iterArr(arr) &#123;            //迭代器返回一个迭代器对象</div><div class="line">  if (Array.isArray(arr)) &#123;         // 内节点</div><div class="line">  for(let i=0; i &lt; arr.length; i++) &#123;</div><div class="line">  yield* iterArr(arr[i]);   // (*)递归</div><div class="line">  &#125;</div><div class="line">  &#125; else &#123;                          // 离开     </div><div class="line">  yield arr;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 使用 for-of 遍历:</div><div class="line">var arr = [&apos;a&apos;, [&apos;b&apos;, &apos;c&apos;], [&apos;d&apos;, &apos;e&apos;]];</div><div class="line">for(var x of iterArr(arr)) &#123;</div><div class="line">console.log(x);               // a  b  c  d  e</div><div class="line"> &#125;</div><div class="line"></div><div class="line">// 或者直接将迭代器展开:</div><div class="line">var arr = [ &apos;a&apos;, [&apos;b&apos;,[ &apos;c&apos;, [&apos;d&apos;, &apos;e&apos;]]]];</div><div class="line">var gen = iterArr(arr);</div><div class="line">arr = [...gen];</div></pre></td></tr></table></figure></li></ol><h3 id="generator-amp-amp-async和await"><a href="#generator-amp-amp-async和await" class="headerlink" title="generator&amp;&amp;async和await"></a>generator&amp;&amp;async和await</h3><p>ES2017 标准引入了 async 函数,在异步处理上，async 函数就是 Generator 函数的语法糖。</p><p>顺序执行和异步执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//顺序执行</span></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> getList = <span class="keyword">await</span> getList();</div><div class="line">  <span class="keyword">const</span> getAnotherList = <span class="keyword">await</span> getAnotherList();</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//异步执行(方法1)</span></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> listPromise = getList();</div><div class="line">  <span class="keyword">const</span> anotherListPromise = getAnotherList();</div><div class="line">  <span class="keyword">await</span> listPromise;</div><div class="line">  <span class="keyword">await</span> anotherListPromise;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//异步执行(方法2)</span></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="built_in">Promise</span>.all([getList(), getAnotherList()]).then(...);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>问题：给定一个 URL 数组，如何实现接口的继发和并发？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继发一</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> res1 = <span class="keyword">await</span> fetch(url1);</div><div class="line">  <span class="keyword">var</span> res2 = <span class="keyword">await</span> fetch(url2);</div><div class="line">  <span class="keyword">var</span> res3 = <span class="keyword">await</span> fetch(url3);</div><div class="line">  <span class="keyword">return</span> <span class="string">"whew all done"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 继发二</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">urls</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> response.text());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 并发一</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([fetch(url1), fetch(url2), fetch(url3)]);</div><div class="line">  <span class="keyword">return</span> <span class="string">"whew all done"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 并发二</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">urls</span>) </span>&#123;</div><div class="line">  <span class="comment">// 并发读取 url</span></div><div class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="keyword">async</span> url =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</div><div class="line">    <span class="keyword">return</span> response.text();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 按次序输出</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> textPromise <span class="keyword">of</span> textPromises) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> textPromise);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>async 错误捕获<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法1</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTask</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">       <span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findById(<span class="number">1</span>);</div><div class="line">       <span class="keyword">if</span>(!user) <span class="keyword">return</span> cb(<span class="string">'No user found'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">return</span> cb(<span class="string">'Unexpected error occurred'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//写法2</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTask</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> [err,user] = <span class="keyword">await</span> UserModel.findById(<span class="number">1</span>);</div><div class="line">  <span class="keyword">if</span>(!user) <span class="keyword">throw</span> <span class="keyword">new</span> CustomerError(<span class="string">'No user found'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// to.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">to</span>(<span class="params">promise</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> promise.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> [<span class="literal">null</span>, data];</div><div class="line">   &#125;)</div><div class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span> [err]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基础用用&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="generator&amp;yield" scheme="https://uniquecrownclown.github.io/tags/generator-yield/"/>
    
      <category term="js同步异步" scheme="https://uniquecrownclown.github.io/tags/js%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>token认证</title>
    <link href="https://uniquecrownclown.github.io/2018/09/23/knowledge/token%E8%AE%A4%E8%AF%81/"/>
    <id>https://uniquecrownclown.github.io/2018/09/23/knowledge/token认证/</id>
    <published>2018-09-23T02:44:41.249Z</published>
    <updated>2018-10-26T06:43:07.113Z</updated>
    
    <content type="html"><![CDATA[<p>json web token 简称JWT，是基于JSON的一种开放标准<br>    JWT = base64编码(header) + ‘.’ + base64编码(payload) + ‘.’ + signature<br>token流程</p><pre><code>1. 用户使用用户名密码来请求服务器2. 服务器进行验证用户的信息3. 服务器通过验证发送给用户一个token4. 客户端存储token，并在每次请求时附送上这个token值5. 服务端验证token值，并返回数据</code></pre><p>客户端应用<br>    fetch(‘api/user/1’, {<br>      headers: {<br>        ‘Authorization’: ‘Bearer ‘ + token<br>      }<br>    })</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;json web token 简称JWT，是基于JSON的一种开放标准&lt;br&gt;    JWT = base64编码(header) + ‘.’ + base64编码(payload) + ‘.’ + signature&lt;br&gt;token流程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="token认证" scheme="https://uniquecrownclown.github.io/tags/token%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs笔记</title>
    <link href="https://uniquecrownclown.github.io/2018/09/14/knowledge/nodeJs%E7%94%A8%E6%B3%95/"/>
    <id>https://uniquecrownclown.github.io/2018/09/14/knowledge/nodeJs用法/</id>
    <published>2018-09-14T02:15:04.925Z</published>
    <updated>2018-09-14T03:35:53.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm-amp-amp-yarn"><a href="#npm-amp-amp-yarn" class="headerlink" title="npm &amp;&amp; yarn"></a>npm &amp;&amp; yarn</h3><p><img src="/images/knowledge/nodeJsPic/npmyarn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;npm-amp-amp-yarn&quot;&gt;&lt;a href=&quot;#npm-amp-amp-yarn&quot; class=&quot;headerlink&quot; title=&quot;npm &amp;amp;&amp;amp; yarn&quot;&gt;&lt;/a&gt;npm &amp;amp;&amp;amp; yarn&lt;/h3&gt;&lt;p&gt;&lt;img src
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="nodeJs笔记" scheme="https://uniquecrownclown.github.io/tags/nodeJs%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="https://uniquecrownclown.github.io/2018/09/13/knowledge/linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://uniquecrownclown.github.io/2018/09/13/knowledge/linux命令/</id>
    <published>2018-09-13T01:04:06.805Z</published>
    <updated>2019-03-27T02:31:36.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux常见"><a href="#linux常见" class="headerlink" title="linux常见"></a>linux常见</h3><p><img src="/images/knowledge/linuxPic/order.png" alt=""></p><h3 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h3><p><img src="/images/knowledge/linuxPic/vim.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;linux常见&quot;&gt;&lt;a href=&quot;#linux常见&quot; class=&quot;headerlink&quot; title=&quot;linux常见&quot;&gt;&lt;/a&gt;linux常见&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/knowledge/linuxPic/order.png&quot; al
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux命令" scheme="https://uniquecrownclown.github.io/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>java笔记</title>
    <link href="https://uniquecrownclown.github.io/2018/09/13/knowledge/java%E7%AC%94%E8%AE%B0/"/>
    <id>https://uniquecrownclown.github.io/2018/09/13/knowledge/java笔记/</id>
    <published>2018-09-13T01:03:04.623Z</published>
    <updated>2018-10-25T07:36:17.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><p>同步回调<br>代码运行到某一个位置的时候，如果遇到了需要回调的代码，会在这里等待，等待回调结果返回后再继续执行。</p><p>异步回调<br>代码执行到需要回调的代码的时候，并不会停下来，而是继续执行，当然可能过一会回调的结果会返回回来。</p><h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><p>实现异步监听</p><h3 id="io与nio"><a href="#io与nio" class="headerlink" title="io与nio"></a>io与nio</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;callback&quot;&gt;&lt;a href=&quot;#callback&quot; class=&quot;headerlink&quot; title=&quot;callback&quot;&gt;&lt;/a&gt;callback&lt;/h3&gt;&lt;p&gt;同步回调&lt;br&gt;代码运行到某一个位置的时候，如果遇到了需要回调的代码，会在这里等待，等待回调
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java笔记" scheme="https://uniquecrownclown.github.io/tags/java%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>es6语法笔记</title>
    <link href="https://uniquecrownclown.github.io/2018/09/13/knowledge/es6%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://uniquecrownclown.github.io/2018/09/13/knowledge/es6语法笔记/</id>
    <published>2018-09-13T00:52:47.575Z</published>
    <updated>2019-03-27T03:06:12.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><ol><li>不定参数长度<br>es5实现不定参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//在以往，我们给函数传不确定参数数量时，是通过arguments来获取的</div><div class="line">function sum() &#123;</div><div class="line">  console.log(arguments) // &#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3, &apos;3&apos;: 4, &apos;4&apos;: 5 &#125;</div><div class="line">  let total = 0</div><div class="line">  let &#123; length &#125; = arguments</div><div class="line">  for(let i = 0;i &lt; length;i++)&#123;</div><div class="line">    total += arguments[i]</div><div class="line">  &#125;</div><div class="line">  return total</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(sum(1,2,3,4,5)) // 21</div></pre></td></tr></table></figure></li></ol><p>es6实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 接下来我们用扩展运算符看看</div><div class="line">function sum(...args)&#123; // 使用...扩展运算符</div><div class="line">    console.log(args) // [ 1, 2, 3, 4, 5, 6 ] args是一个数组</div><div class="line">    return eval(args.join(&apos;+&apos;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(sum(1,2,3,4,5,6)) // 21</div></pre></td></tr></table></figure></p><ol><li><p>连接数组和对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let arr1 = [1,2,3]</div><div class="line">let arr2 = [4,5,6]</div><div class="line">let arr3 = [...arr1,...arr2]</div><div class="line"></div><div class="line">// 使用扩展运算符</div><div class="line">let name = &#123; name:&quot;邵威儒&quot; &#125;</div><div class="line">let age = &#123; age:28 &#125;</div><div class="line">let person = &#123;...name,...age&#125;</div></pre></td></tr></table></figure></li><li><p>复制和合并对象,对象重复以后面的为主，相当于重写(属于修改原对象类型的function)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; a: 1 &#125;;</div><div class="line">var obj2 = &#123; b: 2 &#125;;</div><div class="line">var copy = Object.assign(&#123;&#125;, obj);</div><div class="line">var copy2 = Object.assign(obj,obj2);</div><div class="line">console.log(copy); // &#123; a: 1 &#125;</div><div class="line">console.log(copy2); //  &#123; a: 1 ,b: 2 &#125;</div></pre></td></tr></table></figure></li></ol><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>能实现数据双向绑定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符串变量&quot;&gt;&lt;a href=&quot;#字符串变量&quot; class=&quot;headerlink&quot; title=&quot;字符串变量&quot;&gt;&lt;/a&gt;字符串变量&lt;/h3&gt;&lt;h3 id=&quot;扩展运算符&quot;&gt;&lt;a href=&quot;#扩展运算符&quot; class=&quot;headerlink&quot; title=&quot;扩展运
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="es6简单笔记" scheme="https://uniquecrownclown.github.io/tags/es6%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue简单笔记</title>
    <link href="https://uniquecrownclown.github.io/2018/09/07/knowledge/vue%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://uniquecrownclown.github.io/2018/09/07/knowledge/vue简单笔记/</id>
    <published>2018-09-07T01:34:19.583Z</published>
    <updated>2019-03-08T07:27:20.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><pre><code>vue-router 默认的hash模式和history模式的区别用history模式没有#,会和后台的接口耦合在一起充分利用了history.pushState API来完成URL的跳转服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。</code></pre><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><pre><code>专为 Vue.js 应用程序开发的状态管理模式组件的共享状态抽取出来,以一个全局单例模式管理, 能在全局往所有的组件注入数据single组件可以抽出来，多个不同组件用同一个数据源(集中式状态管理)SPA（单页应用程序）vuex：规范组件中数据流动，主要用于异步的http请求后数据的刷新。通过官方的vue-devtools可以无缝对接- state:- mutations:    mutation 必须同步执行- getters:    在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工- actions:    可以异步执行- module:    1. 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。    2. 为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割Getter 就是把组件中共有的对state 的操作进行了提取，它就相当于 对state 的computed. 所以它会获得state 作为第一个参数。(也可以不用getter，那么在每個組件需要的state的加工后操作返回值時，都需要在各自的computed中进行处理，这不就重复么)</code></pre><h3 id="常见常用点"><a href="#常见常用点" class="headerlink" title="常见常用点"></a>常见常用点</h3><ol><li><p>如果是得到state还需要进一步操作filter，在getter中完成，，减少view或者是component的代码量</p></li><li><p>mutation保证是纯函数，，在action中用commit的方式去添加处理逻辑</p></li><li><p>rqrfqrfqfrf</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue-router&quot;&gt;&lt;/a&gt;vue-router&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;vue-router 默认的hash模式和history模式
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue简单笔记" scheme="https://uniquecrownclown.github.io/tags/vue%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>常见算法知识</title>
    <link href="https://uniquecrownclown.github.io/2018/09/06/knowledge/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86/"/>
    <id>https://uniquecrownclown.github.io/2018/09/06/knowledge/常见算法知识/</id>
    <published>2018-09-06T02:39:12.781Z</published>
    <updated>2018-09-13T00:50:19.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见排序算法"><a href="#常见排序算法" class="headerlink" title="常见排序算法"></a>常见排序算法</h3><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见排序算法&quot;&gt;&lt;a href=&quot;#常见排序算法&quot; class=&quot;headerlink&quot; title=&quot;常见排序算法&quot;&gt;&lt;/a&gt;常见排序算法&lt;/h3&gt;&lt;h3 id=&quot;时间和空间复杂度&quot;&gt;&lt;a href=&quot;#时间和空间复杂度&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="常见算法" scheme="https://uniquecrownclown.github.io/tags/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Array一些用法总结</title>
    <link href="https://uniquecrownclown.github.io/2018/09/06/knowledge/js%E6%95%B0%E7%BB%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/"/>
    <id>https://uniquecrownclown.github.io/2018/09/06/knowledge/js数组常见用法/</id>
    <published>2018-09-06T02:30:11.923Z</published>
    <updated>2019-03-27T02:54:49.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript数组常见原型方法"><a href="#javascript数组常见原型方法" class="headerlink" title="javascript数组常见原型方法"></a>javascript数组常见原型方法</h2><h3 id="prototype-call-amp-amp-apply"><a href="#prototype-call-amp-amp-apply" class="headerlink" title="prototype,call&amp;&amp;apply"></a>prototype,call&amp;&amp;apply</h3><ol><li>prototype是函数的一个属性，并且是函数的原型对象。引用它的必然是函数<br>Array.prototype是一个数组<br>String.prototype是一个字符串<br>Object.prototype是一个对象</li><li>prototype的应用<br> 2.1 原形对象增加公有属性<br> 2.2 原形对象增加公有函数<br> 2.3 实现原形继承<br>slice() 方法返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 经典例子(从第二个实参数开始获取func函数的实参)</div><div class="line">function func()&#123;</div><div class="line">var args = Array.prototype.slice.call(arguments, 1);</div><div class="line">return args;</div><div class="line">&#125;</div><div class="line">alert(func(0,1,2,3,4));//给func函数传实参</div><div class="line"></div><div class="line">3. call()允许为不同的对象分配和调用属于一个对象的函数/方法。</div><div class="line">call()提供新的 this 值给当前调用的函数/方法。</div><div class="line">你可以使用call来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</div><div class="line">使用call方法防止调用对象的原型方法被改变</div></pre></td></tr></table></figure></li></ol><h3 id="Array-indexOf-amp-Array-includes"><a href="#Array-indexOf-amp-Array-includes" class="headerlink" title="Array.indexOf&amp;Array.includes"></a>Array.indexOf&amp;Array.includes</h3><p>Array.indexOf返回的是位置的index,Array.includes返回boolean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const characters = [0,1,2,3];</div><div class="line"></div><div class="line">console.log(characters.indexOf(0));</div><div class="line">// 0</div><div class="line">console.log(characters.includes(0));</div><div class="line">// true</div></pre></td></tr></table></figure><h3 id="Array-forEach-s"><a href="#Array-forEach-s" class="headerlink" title="Array.forEach(s)"></a>Array.forEach(s)</h3><p>包含异步操作时，await和async无效，可改用for(item of items){}实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class="line"></div><div class="line">a.forEach(function(element) &#123;</div><div class="line">    console.log(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="Array-some-amp-Array-filter-amp-Array-find"><a href="#Array-some-amp-Array-filter-amp-Array-find" class="headerlink" title="Array.some()&amp;Array.filter()&amp;Array.find()"></a>Array.some()&amp;Array.filter()&amp;Array.find()</h3><p>数组是否含有某元素，，数组含有该元素的唯一记录，，数组含有该元素的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const character = [</div><div class="line">  &#123; id: 1, name: &apos;ironman&apos;, env: &apos;marvel&apos; &#125;,</div><div class="line">  &#123; id: 2, name: &apos;black_widow&apos;, env: &apos;marvel&apos; &#125;,</div><div class="line">  &#123; id: 3, name: &apos;wonder_woman&apos;, env: &apos;dc_comics&apos; &#125;,</div><div class="line">];</div><div class="line"></div><div class="line">function hasCharacterFrom(env) &#123;</div><div class="line">  return character =&gt; character.env === env;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(character.some(hasCharacterFrom(&apos;marvel&apos;)));</div><div class="line">// true</div><div class="line"></div><div class="line">console.log(character.find(hasCharacterFrom(&apos;marvel&apos;)));</div><div class="line">// &#123; id: 1, name: &apos;ironman&apos;, env: &apos;marvel&apos; &#125; (找到一个就停)</div><div class="line"></div><div class="line">console.log(character.filter(hasCharacterFrom(&apos;marvel&apos;)));</div><div class="line">// [&#123; id: 1, name: &apos;ironman&apos;, env: &apos;marvel&apos; &#125;,&#123; id: 2, name: &apos;black_widow&apos;, env: &apos;marvel&apos; &#125;]</div></pre></td></tr></table></figure><h3 id="Array-map的用法"><a href="#Array-map的用法" class="headerlink" title="Array.map的用法"></a>Array.map的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">newArray = Array.map((value)=&gt;&#123;return value+1&#125;);</div></pre></td></tr></table></figure><h3 id="Array-reduce的用法"><a href="#Array-reduce的用法" class="headerlink" title="Array.reduce的用法"></a>Array.reduce的用法</h3><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值</p><p>参数： </p><ul><li>callback(执行数组中每个值的函数，包含四个参数)</li><li>previousValue<br>上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li>currentValue<br>数组中当前被处理的元素</li><li>index<br>当前元素在数组中的索引</li><li>array<br>调用 reduce 的数组</li><li>initialValue<br>作为第一次调用 callback 的第一个参数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var total = [0,1,2,3,4].reduce(function(previousValue, currentValue, index, array)&#123;</div><div class="line">  return previousValue + currentValue;</div><div class="line">&#125;,10);</div><div class="line"></div><div class="line">console.log(tatal);</div><div class="line"></div><div class="line">//返回初始值10加上数组每项值的累积,tatal:20</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) &#123;</div><div class="line">    return a.concat(b);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log([0, 1].concat([2, 3]));</div><div class="line"></div><div class="line">console.log(flattened);</div><div class="line"></div><div class="line">// flattened is [0, 1, 2, 3, 4, 5]</div></pre></td></tr></table></figure><p>当然最好还是去mdn看看具体用法组好</p><p><a href="https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">MDN web docs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;javascript数组常见原型方法&quot;&gt;&lt;a href=&quot;#javascript数组常见原型方法&quot; class=&quot;headerlink&quot; title=&quot;javascript数组常见原型方法&quot;&gt;&lt;/a&gt;javascript数组常见原型方法&lt;/h2&gt;&lt;h3 id=&quot;p
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript，Array" scheme="https://uniquecrownclown.github.io/tags/javascript%EF%BC%8CArray/"/>
    
  </entry>
  
  <entry>
    <title>常用网络协议!</title>
    <link href="https://uniquecrownclown.github.io/2018/08/02/knowledge/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>https://uniquecrownclown.github.io/2018/08/02/knowledge/常用网络协议/</id>
    <published>2018-08-02T02:04:17.395Z</published>
    <updated>2018-09-13T00:48:52.419Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="TCP，http，socket，握手挥手" scheme="https://uniquecrownclown.github.io/tags/TCP%EF%BC%8Chttp%EF%BC%8Csocket%EF%BC%8C%E6%8F%A1%E6%89%8B%E6%8C%A5%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>win32下的锁屏实现</title>
    <link href="https://uniquecrownclown.github.io/2018/05/14/knowledge/win32%E5%AE%9E%E7%8E%B0%E9%94%81%E5%B1%8F/"/>
    <id>https://uniquecrownclown.github.io/2018/05/14/knowledge/win32实现锁屏/</id>
    <published>2018-05-14T02:18:01.829Z</published>
    <updated>2018-09-13T00:58:17.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="win32下的锁屏实现"><a href="#win32下的锁屏实现" class="headerlink" title="win32下的锁屏实现"></a>win32下的锁屏实现</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.eclipse.swt.events.DisposeEvent;  </div><div class="line"><span class="keyword">import</span> org.eclipse.swt.events.DisposeListener;  </div><div class="line"><span class="keyword">import</span> org.eclipse.swt.internal.win32.OS;  </div><div class="line"><span class="keyword">import</span> org.eclipse.swt.widgets.Shell;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.Hook;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.Keyboard_LLHook;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.Mouse_LLHook;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.data.Keyboard_LLHookData;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.data.Mouse_LLHookData;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.interceptor.InterceptorFlag;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.interceptor.Keyboard_LLHookInterceptor;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.hook.interceptor.Mouse_LLHookInterceptor;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.registry.RegistryKey;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.registry.RegistryValue;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.registry.RootKey;  </div><div class="line"><span class="keyword">import</span> org.sf.feeling.swt.win32.extension.registry.ValueType;  </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * Ticket:屏蔽系统快捷键，供锁屏使用(添加禁用鼠标事件) </span></div><div class="line"><span class="comment"> *  </span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> XXXXX </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinEventInterceptor</span> </span>&#123;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Shell tagShell;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Keyboard_LLHookInterceptor keyboard_LLHookInterceptor;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Mouse_LLHookInterceptor mouse_LLHookInterceptor;  </div><div class="line"><span class="keyword">static</span> &#123;  </div><div class="line">keyboard_LLHookInterceptor = <span class="keyword">new</span> Keyboard_LLHookInterceptor() &#123;  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> InterceptorFlag <span class="title">intercept</span><span class="params">(Keyboard_LLHookData hookData)</span> </span>&#123;  </div><div class="line"><span class="keyword">int</span> vkCode = hookData.vkCode();  </div><div class="line"><span class="keyword">boolean</span> isCtrlPressed = OS.GetKeyState(<span class="number">17</span>) &lt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;  </div><div class="line"><span class="keyword">boolean</span> isAltPressed = OS.GetKeyState(<span class="number">18</span>) &lt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;  </div><div class="line"><span class="comment">// 屏蔽windows键  </span></div><div class="line"><span class="keyword">if</span> (vkCode == <span class="number">91</span>) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// 屏蔽ALT+ESC  </span></div><div class="line"><span class="keyword">if</span> (isAltPressed &amp;&amp; vkCode == <span class="number">27</span>) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// 屏蔽CTRL+ESC  </span></div><div class="line"><span class="keyword">if</span> (isCtrlPressed &amp;&amp; vkCode == <span class="number">27</span>) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// 屏蔽ALT+TAB  </span></div><div class="line"><span class="keyword">if</span> (isAltPressed &amp;&amp; vkCode == <span class="number">9</span>) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">// 屏蔽ALT+F4  </span></div><div class="line"><span class="keyword">if</span> (isAltPressed &amp;&amp; vkCode == <span class="number">115</span>) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.TRUE;  </div><div class="line">&#125;  </div><div class="line">&#125;;  </div><div class="line">mouse_LLHookInterceptor = <span class="keyword">new</span> Mouse_LLHookInterceptor() &#123;  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> InterceptorFlag <span class="title">intercept</span><span class="params">(Mouse_LLHookData hookData)</span> </span>&#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line">&#125;;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * 根据disable为true时，鼠标不可用；false时，鼠标可用 </span></div><div class="line"><span class="comment"> *  </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> disable </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMouseDisable</span><span class="params">(<span class="keyword">boolean</span> disable)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (disable) &#123;  </div><div class="line">Mouse_LLHook.addHookInterceptor(mouse_LLHookInterceptor);  </div><div class="line"><span class="keyword">if</span> (!Mouse_LLHook.isInstalled())  </div><div class="line">Mouse_LLHook.installHook();  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line"><span class="keyword">if</span> (Mouse_LLHook.isInstalled())  </div><div class="line">Mouse_LLHook.unInstallHook();  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * 自定义添加禁用哪些鼠标事件 </span></div><div class="line"><span class="comment"> *  </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> disable </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> mouseEvents </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMouseDisable</span><span class="params">(<span class="keyword">boolean</span> disable, <span class="keyword">final</span> MOUSE_EVENT... mouseEvents)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (disable) &#123;  </div><div class="line">Mouse_LLHook.addHookInterceptor(<span class="keyword">new</span> Mouse_LLHookInterceptor() &#123;  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> InterceptorFlag <span class="title">intercept</span><span class="params">(Mouse_LLHookData hookData)</span> </span>&#123;  </div><div class="line">MOUSE_EVENT event = <span class="keyword">null</span>;  </div><div class="line"><span class="keyword">if</span> (hookData.getWParam() == <span class="number">512</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.MOVE;  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hookData.getWParam() == <span class="number">513</span> || hookData.getWParam() == <span class="number">514</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.LEFT_PRESS;  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hookData.getWParam() == <span class="number">516</span> || hookData.getWParam() == <span class="number">517</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.RIGHT_PRESS;  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hookData.getWParam() == <span class="number">519</span> || hookData.getWParam() == <span class="number">520</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.MIDDLE_PRESS;  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hookData.getWParam() == <span class="number">522</span> &amp;&amp; hookData.getMouseData() &gt; <span class="number">0</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.WHEEL_UP;  </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hookData.getWParam() == <span class="number">522</span> &amp;&amp; hookData.getMouseData() &lt; <span class="number">0</span>) &#123;  </div><div class="line">event = MOUSE_EVENT.WHEEL_DOWN;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">for</span> (MOUSE_EVENT mouse_event : mouseEvents) &#123;  </div><div class="line"><span class="keyword">if</span> (mouse_event == event) &#123;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.FALSE;  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">return</span> InterceptorFlag.TRUE;  </div><div class="line">&#125;  </div><div class="line">&#125;);  </div><div class="line"><span class="keyword">if</span> (!Mouse_LLHook.isInstalled())  </div><div class="line">Mouse_LLHook.installHook();  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line"><span class="keyword">if</span> (Mouse_LLHook.isInstalled())  </div><div class="line">Mouse_LLHook.unInstallHook();  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * 禁用几个快捷键，windows键，ALT+ESC，CTRL+ESC，ALT+TAB，ALT+F4，任务管理器 </span></div><div class="line"><span class="comment"> *  </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> shell </span></div><div class="line"><span class="comment"> *            程序主窗口 </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> disable </span></div><div class="line"><span class="comment"> *            是否禁用 </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setKeyDisable</span><span class="params">(<span class="keyword">final</span> Shell shell, <span class="keyword">boolean</span> disable)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (shell == <span class="keyword">null</span>) &#123;  </div><div class="line"><span class="keyword">return</span>;  </div><div class="line">&#125;  </div><div class="line">DisposeListener disposeListener = <span class="keyword">new</span> DisposeListener() &#123;  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">widgetDisposed</span><span class="params">(DisposeEvent e)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (Hook.KEYBOARD.isInstalled(shell))  </div><div class="line">Hook.KEYBOARD.uninstall(shell);  </div><div class="line">taskmgrDisable(<span class="keyword">false</span>);  </div><div class="line">&#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">if</span> (disable) &#123;  </div><div class="line"><span class="keyword">if</span> (tagShell == shell) &#123;  </div><div class="line"><span class="keyword">return</span>;  </div><div class="line">&#125;  </div><div class="line">taskmgrDisable(disable);  </div><div class="line">Keyboard_LLHook.addHookInterceptor(keyboard_LLHookInterceptor);  </div><div class="line"><span class="keyword">if</span> (!Keyboard_LLHook.isInstalled())  </div><div class="line">Keyboard_LLHook.installHook();  </div><div class="line">shell.addDisposeListener(disposeListener);  </div><div class="line">tagShell = shell;  </div><div class="line">&#125; <span class="keyword">else</span> &#123;  </div><div class="line"><span class="keyword">if</span> (tagShell != shell) &#123;  </div><div class="line"><span class="keyword">return</span>;  </div><div class="line">&#125;  </div><div class="line">taskmgrDisable(disable);  </div><div class="line"><span class="keyword">if</span> (Keyboard_LLHook.isInstalled())  </div><div class="line">Keyboard_LLHook.unInstallHook();  </div><div class="line">shell.removeDisposeListener(disposeListener);  </div><div class="line">tagShell = <span class="keyword">null</span>;  </div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> * 禁用任务管理器 </span></div><div class="line"><span class="comment"> *  </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> useable </span></div><div class="line"><span class="comment"> *            useable:true为禁用，false为启用 </span></div><div class="line"><span class="comment"> */</span>  </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taskmgrDisable</span><span class="params">(<span class="keyword">boolean</span> useable)</span> </span>&#123;  </div><div class="line">RootKey currentUser = RootKey.HKEY_CURRENT_USER;  </div><div class="line">RegistryKey key = <span class="keyword">new</span> RegistryKey(currentUser,  </div><div class="line"><span class="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"</span>);  </div><div class="line"><span class="keyword">if</span> (!key.exists()) &#123;  </div><div class="line">key.create();  </div><div class="line">&#125;  </div><div class="line">RegistryValue value = <span class="keyword">new</span> RegistryValue();  </div><div class="line">value.setType(ValueType.REG_DWORD);  </div><div class="line"><span class="keyword">if</span> (useable)  </div><div class="line">value.setData(<span class="number">1</span>);  </div><div class="line"><span class="keyword">else</span>  </div><div class="line">value.setData(<span class="number">0</span>);  </div><div class="line">value.setName(<span class="string">"DisableTaskmgr"</span>);  </div><div class="line">key.setValue(value);  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">enum</span> MOUSE_EVENT &#123;  </div><div class="line">MOVE, LEFT_PRESS, RIGHT_PRESS, MIDDLE_PRESS, WHEEL_UP, WHEEL_DOWN  </div><div class="line">&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;win32下的锁屏实现&quot;&gt;&lt;a href=&quot;#win32下的锁屏实现&quot; class=&quot;headerlink&quot; title=&quot;win32下的锁屏实现&quot;&gt;&lt;/a&gt;win32下的锁屏实现&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight j
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="锁屏实现" scheme="https://uniquecrownclown.github.io/tags/%E9%94%81%E5%B1%8F%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="java屏蔽事件" scheme="https://uniquecrownclown.github.io/tags/java%E5%B1%8F%E8%94%BD%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>10月13随笔</title>
    <link href="https://uniquecrownclown.github.io/2017/10/13/life/10%E6%9C%8813%E9%9A%8F%E7%AC%94/"/>
    <id>https://uniquecrownclown.github.io/2017/10/13/life/10月13随笔/</id>
    <published>2017-10-13T03:20:32.000Z</published>
    <updated>2018-10-25T06:52:46.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/life/greatWall.jpg" alt=""></p><p>日啖荔枝三百颗，不辞长做岭南人。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/life/greatWall.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;日啖荔枝三百颗，不辞长做岭南人。。&lt;/p&gt;

      
    
    </summary>
    
      <category term="琐言碎语" scheme="https://uniquecrownclown.github.io/categories/%E7%90%90%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
      <category term="博客，10月13，随笔" scheme="https://uniquecrownclown.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C10%E6%9C%8813%EF%BC%8C%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>红壳桃</title>
    <link href="https://uniquecrownclown.github.io/2017/09/26/life/%E7%BA%A2%E5%A3%B3%E6%A1%83/"/>
    <id>https://uniquecrownclown.github.io/2017/09/26/life/红壳桃/</id>
    <published>2017-09-26T03:23:20.000Z</published>
    <updated>2018-09-14T02:13:04.773Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/life/hongtao.jpg" alt=""></p><p>待实现。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/life/hongtao.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;待实现。。。。&lt;/p&gt;

      
    
    </summary>
    
      <category term="琐言碎语" scheme="https://uniquecrownclown.github.io/categories/%E7%90%90%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
    
      <category term="红壳桃" scheme="https://uniquecrownclown.github.io/tags/%E7%BA%A2%E5%A3%B3%E6%A1%83/"/>
    
  </entry>
  
  <entry>
    <title>斯台普斯的紫金</title>
    <link href="https://uniquecrownclown.github.io/2017/09/21/ballmusic/%E6%96%AF%E5%8F%B0%E6%99%AE%E6%96%AF%E7%9A%84%E7%B4%AB%E9%87%91/"/>
    <id>https://uniquecrownclown.github.io/2017/09/21/ballmusic/斯台普斯的紫金/</id>
    <published>2017-09-21T03:23:51.000Z</published>
    <updated>2018-09-06T11:38:06.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ballmusic/staples.png" alt=""></p><h2 id="洛杉矶斯台普斯中心"><a href="#洛杉矶斯台普斯中心" class="headerlink" title="洛杉矶斯台普斯中心"></a>洛杉矶斯台普斯中心</h2><h3 id="Staples-Center"><a href="#Staples-Center" class="headerlink" title="Staples Center"></a>Staples Center</h3><p>斯台普斯中心（StaplesCenter），位于美国加利福尼亚州洛杉矶市中心，毗邻L.A.Live开发区，坐落于菲格罗亚街上的洛杉矶会议中心建筑物群旁。1998年3月31日开始动工修建，1999年10月17日正式落成开放，是一座多功能体育馆，也是大洛杉矶地区主要的体育设施之一。斯台普斯中心由洛杉矶体育馆公司（L.A. Arena Company）与安舒茨娱乐集团营运。斯台普斯中心在每年举办超过250场的活动，拥有近400万人次的游客。它是NBA唯一被两支队伍同时共用的球馆，也是北美洲唯一一座同时有两支NBA、一支NHL及一支WNBA球队作为主场的球馆。</p><h3 id="Los-Angeles-Lakers"><a href="#Los-Angeles-Lakers" class="headerlink" title="Los Angeles Lakers"></a>Los Angeles Lakers</h3><p>洛杉矶湖人队（Los Angeles Lakers）是一个位于美国加利福尼亚州洛杉矶的篮球俱乐部，1947年成立于明尼阿波利斯，1960年搬迁到了洛杉矶。湖人这个名字来源于明尼阿波利斯的别称——千湖之地，指在美国东北五大湖工作或者居住的人。</p><p>截至2017-18赛季结束，湖人队史共56次进入季后赛、31次获得西部冠军、16次获得总冠军，仅次于波士顿凯尔特人队（17次）；最高连胜纪录为33场（NBA历史最高）。</p><h3 id="Kobe-Bryant"><a href="#Kobe-Bryant" class="headerlink" title="Kobe Bryant"></a>Kobe Bryant</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ballmusic/staples.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;洛杉矶斯台普斯中心&quot;&gt;&lt;a href=&quot;#洛杉矶斯台普斯中心&quot; class=&quot;headerlink&quot; title=&quot;洛杉矶斯台普斯中心&quot;&gt;&lt;/a&gt;洛杉矶
      
    
    </summary>
    
      <category term="音乐篮球" scheme="https://uniquecrownclown.github.io/categories/%E9%9F%B3%E4%B9%90%E7%AF%AE%E7%90%83/"/>
    
    
      <category term="洛杉矶湖人，斯台普斯中心，布莱恩特" scheme="https://uniquecrownclown.github.io/tags/%E6%B4%9B%E6%9D%89%E7%9F%B6%E6%B9%96%E4%BA%BA%EF%BC%8C%E6%96%AF%E5%8F%B0%E6%99%AE%E6%96%AF%E4%B8%AD%E5%BF%83%EF%BC%8C%E5%B8%83%E8%8E%B1%E6%81%A9%E7%89%B9/"/>
    
  </entry>
  
  <entry>
    <title>周杰伦专辑列表</title>
    <link href="https://uniquecrownclown.github.io/2017/09/21/ballmusic/jay%E7%9A%84%E4%B8%93%E8%BE%91/"/>
    <id>https://uniquecrownclown.github.io/2017/09/21/ballmusic/jay的专辑/</id>
    <published>2017-09-21T03:23:51.000Z</published>
    <updated>2018-09-06T11:46:54.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ballmusic/jay.jpg" alt=""></p><h2 id="周杰伦专辑汇总"><a href="#周杰伦专辑汇总" class="headerlink" title="周杰伦专辑汇总"></a>周杰伦专辑汇总</h2><pre><code>jay(2000)范特西(2001)八度空间(2002)叶惠美(2003)七里香(2004)十一月的肖邦(2005)依然范特西(2006)我很忙(2007)魔杰座(2008)跨时代(2010)惊叹号(2011)十二新作(2012)哎呦,不错哦(2014)周杰伦的床边故事(2016)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ballmusic/jay.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;周杰伦专辑汇总&quot;&gt;&lt;a href=&quot;#周杰伦专辑汇总&quot; class=&quot;headerlink&quot; title=&quot;周杰伦专辑汇总&quot;&gt;&lt;/a&gt;周杰伦专辑汇总&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="音乐篮球" scheme="https://uniquecrownclown.github.io/categories/%E9%9F%B3%E4%B9%90%E7%AF%AE%E7%90%83/"/>
    
    
      <category term="周杰伦，专辑" scheme="https://uniquecrownclown.github.io/tags/%E5%91%A8%E6%9D%B0%E4%BC%A6%EF%BC%8C%E4%B8%93%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo!</title>
    <link href="https://uniquecrownclown.github.io/2017/09/21/knowledge/%E4%BD%BF%E7%94%A8hexo/"/>
    <id>https://uniquecrownclown.github.io/2017/09/21/knowledge/使用hexo/</id>
    <published>2017-09-21T01:58:05.358Z</published>
    <updated>2018-09-13T00:57:56.486Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="全局安裝Hexo"><a href="#全局安裝Hexo" class="headerlink" title="全局安裝Hexo"></a>全局安裝Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install hexo -g</div></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo server //在本地服务器上测试，端口4000</div><div class="line">//还可开启调试模式（即加上 --debug）</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate //刷新hexo的资源</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy //同步到github</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next </div><div class="line">//下载一个next主题的例子</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/themes/" target="_blank" rel="external">Themes</a></p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">'文章名'</span> //在<span class="built_in">source</span>/_posts路径下创建的文章</div><div class="line">//图片资源放在hexo/resources下用markdown相对路径的方式引入</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">Writing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="知识笔记" scheme="https://uniquecrownclown.github.io/categories/%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo，博客配置" scheme="https://uniquecrownclown.github.io/tags/hexo%EF%BC%8C%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
